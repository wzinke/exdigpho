#!/usr/bin/env bash
#
# nef2png
#
# Simple tool to convert the Nikon raw images to png files
#
# w. zinke


Usage() {
cat << EOF

    Usage: $0  [options]

    Convert the Nikon raw images to png files

    OPTIONS:
            -lst      list of image files to be converted
            -o        output directory
            -nw       do not apply white balance
            -max      minimal size of one edge (in pixel)
EOF
    exit 1
}

# default options
wbstr="-w"
odir="pngdir"
get_fls=1

# get options
while [ $# -gt 0 ] ;
do
    case $1 in
        -o)      odir=$2
                 shift 2
                 ;;
        -nw)     wbstr="-W -w"
                 shift 
                 ;;
        -lst)    fllst="$2"
                 get_fls=0
                 shift 2
                 ;;
         -*)     Usage
                 ;;
          *)     break
                 ;;
    esac
done

# if no list of *.NEF files is provided as input,
# then convert all files in the current directory
if [ $get_fls -eq 1 ]
then
    fllst=$(ls -1 *.NEF)
fi

# as default, converted files will be stored in a subdirectory 'pngdir'
# Be aware, that right now, this will overwrite existing files
mkdir -p $odir

# ensure that variabels are passed on to the parallel function
export wbstr
export odir

# define conversion function
ConvFun() {

    cfl=$1
    
    flstem="${cfl%.*}"
    
    # denef --width=4000 --height=4000 --outfile=${flstem}.png $cfl
    
    # dcraw -c $wbstr -o 0 -q 3 -4 $cfl | pnmtopng > $odir/${flstem}.png
    dcraw -c $wbstr  $cfl | pnmtopng > $odir/${flstem}.png
    
    # optipng -o6 -preserve -clobber  pngdir/${flstem}.png
# pnmtojpeg
}

export -f ConvFun

# run conversion in parallel using all available CPU threads
parallel --bar ConvFun ::: $fllst

# http://osp.wikidot.com/raw

# http://manpages.ubuntu.com/manpages/trusty/man1/dcraw.1.html
# http://www.guillermoluijk.com/tutorial/dcraw/index_en.htm
#
# dcraw
# 
# Raw photo decoder "dcraw" v9.28
# by Dave Coffin, dcoffin a cybercom o net
# 
# Usage:  dcraw [OPTION]... [FILE]...
# 
# -v        Print verbose messages
# -c        Write image data to standard output
# -e        Extract embedded thumbnail image
# -i        Identify files without decoding them
# -i -v     Identify files and show metadata
# -z        Change file dates to camera timestamp
# -w        Use camera white balance, if possible
# -a        Average the whole image for white balance
# -A <x y w h> Average a grey box for white balance
# -r <r g b g> Set custom white balance
# +M/-M     Use/don't use an embedded color matrix
# -C <r b>  Correct chromatic aberration
# -P <file> Fix the dead pixels listed in this file
# -K <file> Subtract dark frame (16-bit raw PGM)
# -k <num>  Set the darkness level
# -S <num>  Set the saturation level
# -n <num>  Set threshold for wavelet denoising
# -H [0-9]  Highlight mode (0=clip, 1=unclip, 2=blend, 3+=rebuild)
# -t [0-7]  Flip image (0=none, 3=180, 5=90CCW, 6=90CW)
# -o [0-6]  Output colorspace (raw,sRGB,Adobe,Wide,ProPhoto,XYZ,ACES)
# -o <file> Apply output ICC profile from file
# -p <file> Apply camera ICC profile from file or "embed"
# -d        Document mode (no color, no interpolation)
# -D        Document mode without scaling (totally raw)
# -j        Don't stretch or rotate raw pixels
# -W        Don't automatically brighten the image
# -b <num>  Adjust brightness (default = 1.0)
# -g <p ts> Set custom gamma curve (default = 2.222 4.5)
# -q [0-3]  Set the interpolation quality
# -h        Half-size color image (twice as fast as "-q 0")
# -f        Interpolate RGGB as four colors
# -m <num>  Apply a 3x3 median filter to R-G and B-G
# -s [0..N-1] Select one raw image or "all" from each file
# -6        Write 16-bit instead of 8-bit
# -4        Linear 16-bit, same as "-6 -W -g 1 1"
# -T        Write TIFF instead of PPM



# Usage: denef [options] filename
# 
# Summary of options (Current settings in []'s)
# 
# Data source options:
#   --startx=<pixels>      Start X position of processed output [minimum]
#   --starty=<pixels>      Start Y position of processed output [minimum]
#   --width=<pixels>       Width of processed output [maxmimum]
#   --height=<pixels>      Height of processed output [maxmimum]
#   --interp=<name>        Interpolation algorithm [gradlumin]
#                          Available: null, basic, rgb, lumin, gradlumin
# 
# Post-processing options:
#   --cc=<yes/no>          Perform sRGB color correction [Yes]
#   --scale=<value>        Set linear scale factor [1.6]
#   --gc=<yes/no>          Perform gamma correction [Yes]
# 
# File options:
#   --hist=<yes/no>        Create histogram file [No]
#   --histfile=<filename>  Histogram filename [histo.pgm]
#   --outfile=<filename>   Image output filename [nef.ppm]
# 
# Misc. Options:
#   --show                 Show current settings before starting.
#   --help                 Show options and exit.
