#!/usr/bin/env bash
#
# img_rszd
#
# Simple tool to resize images in order to reduce file size for web use
#
# w. zinke


# if no list of image files is provided as input,
# then convert all files in the current directory
if [ $# -eq 0 ]
then
    fllst=$(find . -maxdepth 1 -type f -exec file --mime-type {} \+ | \
            awk -F: '{if ($2 ~/image\//) print $1}' | cut -d/ -f2)
else
    fllst="$1"
    shift
fi


# as default, converted files will be stored in a subdirectory 'rszd'
# Be aware, that right now, this will overwrite existing files
mkdir -p rszd

# define the function to resize images
RSZfun() {

    cfl=$1
    
    flstem="${cfl%.*}"
    
    convert $cfl  -strip -quality 96% -dither None \
                  -define jpeg:fancy-upsampling=on \
                  -colorspace sRGB -resize 1200x1200^ rszd/${flstem}.jpg                  
#                   -filter LanczosRadius  -sigmoidal-contrast 7.5  \
                  
                  
     jpegoptim --max=95 --all-progressive -q rszd/${flstem}.jpg              
}

export -f RSZfun

# run conversion in parallel using all available CPU threads
parallel --bar RSZfun ::: $fllst


# https://www.fosslinux.com/3469/how-to-resize-images-by-command-line-in-ubuntu.htm
# imgp -x 1366x1000 -wrack


# jpegoptim v1.4.6  Copyright (C) 1996-2018, Timo Kokkonen
# Usage: jpegoptim [options] <filenames> 
# 
#   -d<path>, --dest=<path>
#                     specify alternative destination directory for 
#                     optimized files (default is to overwrite originals)
#   -f, --force       force optimization
#   -h, --help        display this help and exit
#   -m<quality>, --max=<quality>
#                     set maximum image quality factor (disables lossless
#                     optimization mode, which is by default on)
#                     Valid quality values: 0 - 100
#   -n, --noaction    don't really optimize files, just print results
#   -S<size>, --size=<size>
#                     Try to optimize file to given size (disables lossless
#                     optimization mode). Target size is specified either in
#                     kilo bytes (1 - n) or as percentage (1% - 99%)
#   -T<threshold>, --threshold=<threshold>
#                     keep old file if the gain is below a threshold (%)
#   -b, --csv         print progress info in CSV format
#   -o, --overwrite   overwrite target file even if it exists (meaningful
#                     only when used with -d, --dest option)
#   -p, --preserve    preserve file timestamps
#   -P, --preserve-perms
#                     preserve original file permissions by overwriting it
#   -q, --quiet       quiet mode
#   -t, --totals      print totals after processing all files
#   -v, --verbose     enable verbose mode (positively chatty)
#   -V, --version     print program version
# 
#   -s, --strip-all   strip all markers from output file
#   --strip-none      do not strip any markers
#   --strip-com       strip Comment markers from output file
#   --strip-exif      strip Exif markers from output file
#   --strip-iptc      strip IPTC/Photoshop (APP13) markers from output file
#   --strip-icc       strip ICC profile markers from output file
#   --strip-xmp       strip XMP markers markers from output file
# 
#   --all-normal      force all output files to be non-progressive
#   --all-progressive force all output files to be progressive
#   --stdout          send output to standard output (instead of a file)
#   --stdin           read input from standard input (instead of a file)
# 
